{"version":3,"sources":["Components/charts/charts.module.css","Components/countrypicker/countrypicker.module.css","Components/cards/cards.module.css","Components/cards/cards.js","Components/charts/charts.js","Components/countrypicker/countrypicker.js","api/index.js","Components/App.js","redux/actions/actions.js","redux/constants.js","redux/reducers/reducer.js","redux/store/store.js","container/app.js","index.js","Components/App.module.css"],"names":["module","exports","cards","data","className","Styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","text","gutterBottom","variant","start","end","confirmed","value","duration","separator","Date","lastUpdate","toDateString","recovered","textRecovery","deaths","Chart","country","dailyData","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","lineChart","map","date","borderColor","fill","styles","Countrypicker","handleCountryChange","countries","formControl","Autocomplete","onChange","event","newValue","renderInput","params","TextField","url","fetchData","a","dynamicUrl","axios","get","fetchDailyData","reportDate","total","fetchCountriesData","name","console","log","App","props","changeCountryAction","fetchDataAction","this","fetchDailyDataAction","fetchCountriesDataAction","fetching","spinner","size","loading","React","Component","mapDispatchToProps","type","payload","connect","state","dataFetching","countriesFetching","defaultState","store","createStore","action","applyMiddleware","promise","thunk","logger","AppContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e208a6a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"charts_container__1qE0P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"countrypicker_formControl__1oGzJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__3srJu\",\"card\":\"cards_card__3J9lB\",\"infected\":\"cards_infected__3rC7-\",\"recovered\":\"cards_recovered__2rBZj\",\"deaths\":\"cards_deaths__nDzBC\",\"text\":\"cards_text__MnNIT\",\"blink\":\"cards_blink__E7xRq\",\"textRecovery\":\"cards_textRecovery__3WbuH\"};","import React from \"react\";\r\nimport { Card, CardContent, Grid, Typography } from \"@material-ui/core\";\r\nimport Styles from \"./cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nconst cards = ({ data }) => {\r\n  return (\r\n    <div className={Styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(Styles.card, Styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"primary\" className={Styles.text} gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={data.confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              ></CountUp>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(data.lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of Covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(Styles.card, Styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography className={Styles.textRecovery} gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={data.recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              ></CountUp>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(data.lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recovered cases of Covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(Styles.card, Styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"error\" className={Styles.text} gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={data.deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              ></CountUp>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(data.lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths caused by Covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default cards;\r\n","import React from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./charts.module.css\";\r\n\r\nconst Chart = ({\r\n  data: { confirmed, recovered, deaths },\r\n  country,\r\n  dailyData,\r\n}) => {\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const lineChart = dailyData ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\n//import { NativeSelect, FormControl,TextField} from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport styles from \"./countrypicker.module.css\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nconst Countrypicker = ({ handleCountryChange, countries, country }) => {\r\n  return (\r\n    <div className={styles.formControl}>\r\n      <Autocomplete\r\n        value={country}\r\n        onChange={(event, newValue) => {\r\n          handleCountryChange(newValue);\r\n        }}\r\n        options={countries}\r\n        renderInput={(params) => (\r\n          <TextField {...params} label=\"Select a Country\" variant=\"outlined\" />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countrypicker;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\nexport const fetchData = async (country) => {\r\n  let dynamicUrl = url;\r\n  if (country) {\r\n    dynamicUrl = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(dynamicUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({\r\n      confirmed: confirmed.total,\r\n      deaths: deaths.total,\r\n      date,\r\n    }));\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountriesData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/countries`);\r\n    return data.countries.map((country) => country.name);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n","import React from \"react\";\nimport Cards from \"./cards/cards\";\nimport Charts from \"./charts/charts\";\nimport Countrypicker from \"./countrypicker/countrypicker\";\nimport Styles from \"./App.module.css\";\nimport {\n  fetchDataAction,\n  fetchDailyDataAction,\n  fetchCountriesDataAction,\n  changeCountryAction,\n} from \"../redux/actions/actions\";\nimport { connect } from \"react-redux\";\nimport { PacmanLoader } from \"react-spinners\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.fetchDataAction();\n    this.props.fetchDailyDataAction();\n    this.props.fetchCountriesDataAction();\n  }\n  handleCountryChange = async (country) => {\n    this.props.changeCountryAction(country);\n    this.props.fetchDataAction(country);\n  };\n  render() {\n    return (\n      <div>\n        {this.props.fetching ? (\n          <div className={Styles.spinner}>\n            <PacmanLoader\n              size={25}\n              color={\"orange\"}\n              loading={this.props.fetching}\n            />\n          </div>\n        ) : (\n          <div className={Styles.container}>\n            <Cards data={this.props.data} fetching={this.props.fetching} />\n            <Countrypicker\n              handleCountryChange={this.handleCountryChange}\n              countries={this.props.countries}\n              country={this.props.country}\n            />\n            <Charts\n              data={this.props.data}\n              country={this.props.country}\n              dailyData={this.props.dailyData}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  data: state.data,\n  dailyData: state.dailyData,\n  countries: state.countries,\n  country: state.country,\n  fetching: state.dataFetching || state.countriesFetching,\n});\n\nconst mapDispatchToProps = {\n  fetchCountriesDataAction,\n  fetchDailyDataAction,\n  fetchDataAction,\n  changeCountryAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { fetchCountriesData, fetchDailyData, fetchData } from \"../../api\";\r\nimport * as CONSTANTS from \"../constants\";\r\n\r\n// export const asyncApiCall = (values) => {\r\n//   return async (dispatch) => {\r\n//     try {\r\n//       const response = await fetchData();\r\n//       console.log(`response is${response}`);\r\n//       dispatch(fetchDataAction(response));\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//     }\r\n//   };\r\n// };\r\n\r\n//https://stackoverflow.com/questions/35361893/why-does-redux-promise-return-unresolved-promise-if-more-than-type-and-payload-o/35362148#35362148\r\n\r\nexport const fetchDataAction = (country) => {\r\n  return {\r\n    type: CONSTANTS.DATA_FETCHING,\r\n    payload: fetchData(country),\r\n  };\r\n};\r\n\r\nexport const fetchCountriesDataAction = () => {\r\n  return {\r\n    type: CONSTANTS.GET_COUNTRIES,\r\n    payload: fetchCountriesData(),\r\n  };\r\n};\r\n\r\nexport const fetchDailyDataAction = () => {\r\n  return {\r\n    type: CONSTANTS.GET_DAILY_DATA,\r\n    payload: fetchDailyData(),\r\n  };\r\n};\r\n\r\nexport const changeCountryAction = (country) => {\r\n  return {\r\n    type: CONSTANTS.COUNTRY_CHANGE,\r\n    country,\r\n  };\r\n};\r\n","const DATA_FETCHING = \"DATA_FETCHING\";\r\nconst DATA_FETCHED = \"DATA_FETCHED\";\r\n\r\nconst COUNTRY_CHANGE = \"COUNTRY_CHANGE\";\r\nconst GET_COUNTRIES = \"GET_COUNTRIES\";\r\nconst GET_DAILY_DATA = \"GET_DAILY_DATA\";\r\n\r\nexport {\r\n  DATA_FETCHING,\r\n  DATA_FETCHED,\r\n  COUNTRY_CHANGE,\r\n  GET_COUNTRIES,\r\n  GET_DAILY_DATA,\r\n};\r\n","import * as CONSTANTS from \"../constants\";\r\n\r\nconst defaultState = {\r\n  data: {},\r\n  dailyData: [],\r\n  countries: [],\r\n  country: \"\",\r\n  dataFetching: true,\r\n  countriesFetching: true,\r\n};\r\n\r\nexport const reducer = (state = defaultState, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case `${CONSTANTS.GET_COUNTRIES}_PENDING`:\r\n      return {\r\n        ...state,\r\n        countriesFetching: true,\r\n      };\r\n    case `${CONSTANTS.DATA_FETCHING}_PENDING`:\r\n      return {\r\n        ...state,\r\n        dataFetching: true,\r\n      };\r\n    case `${CONSTANTS.DATA_FETCHING}_FULFILLED`:\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n        dataFetching: false,\r\n      };\r\n    case `${CONSTANTS.GET_DAILY_DATA}_FULFILLED`:\r\n      return {\r\n        ...state,\r\n        dailyData: action.payload,\r\n      };\r\n    case `${CONSTANTS.GET_COUNTRIES}_FULFILLED`:\r\n      return {\r\n        ...state,\r\n        countries: action.payload,\r\n        countriesFetching: false,\r\n      };\r\n    case `${CONSTANTS.COUNTRY_CHANGE}`:\r\n      return {\r\n        ...state,\r\n        country: action.country,\r\n      };\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n//\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { reducer } from \"../reducers/reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport logger from \"redux-logger\";\r\nimport promise from \"redux-promise-middleware\";\r\n\r\nexport const store = createStore(\r\n  reducer,\r\n  applyMiddleware(promise, thunk, logger)\r\n);\r\n","import React from \"react\";\r\nimport App from \"../Components/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"../redux/store/store\";\r\n\r\nconst AppContainer = () => {\r\n  return (\r\n    <div>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppContainer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport AppContainer from \"./container/app\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__ViQgV\",\"spinner\":\"App_spinner__3mrcx\"};"],"sourceRoot":""}